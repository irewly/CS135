/*
 * Name: Irene Wang, 5005298618, Assignment 5
 * Description: This program contains three mini programs: Guess A Number,
 * Repeat Word, and My Pow. The user will be able to interact with these
 * programs throught the terminal by inputing answers following prompts.
 * Input: Guess A Number: User input a number between 1 and 10.
 * Repeat Word: User input the word and number of repetitions.
 * My Pow: User input the base and power (integer).
 * Output: Guess A Number: Output message either confirming correct
 * guess or prompting the user to try again.
 * Repeat Word: Output the word a certain number of repetitions
 * as per user request.
 * My Pow: Perform the operation with the user specified 
 * base and power and output the answer to the terminal.
 */

// CS 135 Assignment 5: Loops
#include <iostream>
#include <string>
#include <time.h>    //For Time
#include <stdlib.h>  //For srand
//This is added so the power function answers can be fixed and
//not cout in scientific notation.
#include <iomanip> 
//Not allowed to use cmath or any absolute value function.
using namespace std;

//The first program is Guess A Number, in which the user will be 
//prompted to guess a number between 1 and 10 until the guess is correct.
void guessAnumber(int s){
    int random = rand() % s + 1; //random number in range [1 to s]
    int guess;
    bool done = false;
    cout << "Guess a Number between 1 and "<< s << endl;
    cin >> guess;
    /* 
     * The while loop only runs when the user's input does not match the 
     * random number generated by the program. The follwing message appears 
     * to tell the user to try again.
     */
    while(guess != random){ 
        cout << "The force is not with you. Try Again!" << endl;
        cin >> guess;
    }
    //When the user's input matches the random number, the loop terminates
    //and the following message appears to inform that the guess is correct.
    cout << "The Force is strong with this one! You win!" << endl;
}

//The second program is Repeat Word, in which the user can input any word of
//their choice and tell the program to repeat the word X number of times.
void repeatWord(){
    int repeats;
    string word;
    cout << "Enter a Single word to repeat: ";
    cin >> word;
    cout << "\nEnter How many times to repeat: ";
    cin >> repeats;
    /* 
     * The for loop runs in a count down fashion where the number of repeats
     * decreases by 1 each time the loop runs (which corresponds to the word
     * being printed out 1 time) until "repeat" reaches 0 (the word is no
     * longer printed out to the terminal). 
     */
    for(int i = repeats; i > 0; i--){
        cout << word << endl;
    }
    //This message informs the user that the word has been repeated X
    //number of times.
    cout << "Done repeating word " << repeats << " times!" << endl;
}

void mypow(){ //Note, instead of return 0 or 1, simply type return.
    //Use floats! You must use a loop!
    float base = 0;
    float exponent = 0;
    float answer = 1;
    cout << "My Power Function!\n";
    cout << "Enter base number: ";
    cin >> base;
    cout << "Enter exponent: ";
    cin >> exponent;
    /* 
     * After the user inputs the base and exponent for the program to run,
     * the following if else statements will run depending on if the 
     * exponent is positive (> 0), negative (< 0), or zero.
     * The while loops repeat the process the multiplying the base by itself
     * the specified number of times (exponent). This occurs in a count down
     * fashion where the exponent (or numbers of multiplication to perform)
     * decrease by 1 each time the loop is run.
     */
    if(exponent > 0){
        while(exponent > 0){
            answer *= base;
            exponent--;
        } 
        cout << "The Answer is: " << fixed << answer << endl;
    }
    /* 
     * In the case that the exponent is negative, the answer 1 over the 
     * positivie power function. I decided to change the exponent 
     * to positive first, then manually add the "1/" as part of the answer 
     * output statement string.
     * There are two special scenarios here:
     * The first case is when the base is negative, and the exponent is a odd
     * number, in which the answer would be negative. However, since per sample
     * output, the negative sign needs to appear before the 1, so I changed the
     * manual output "1/" to "-1/" and the "answer" itself to positive.
     * The second case is when the base is equal to zero. Since the exponent is
     * negative here, this leads to "1/0" case which is undefined. The 
     * statement "unable to perform operation" is then outputed to inform the 
     * user that this operation is not possible.
     */
    else if(exponent < 0){
        exponent = - exponent;
        if(base < 0 && int(exponent) % 2 == 1){
            while(exponent > 0){
                answer *= base;
                exponent--;
            }
        cout << "The Answer is: -1/" << fixed << -answer << endl;
        }
        else if(base == 0){
            cout << "Division by zero detected! Unable to perform opertion." << endl;
        }
        else{
            while(exponent > 0){
                answer *= base;
                exponent--;
            }
        cout << "The Answer is: 1/" << fixed << answer << endl;
        }
    }
    /* 
     * The else statement covers the last case where the exponent is equal to 0.
     * In this case, no matter the base, the answer will be 1 as anything to the
     * power of 0 equals 1.
     */
    else{
        answer = 1;
        cout << "The Answer is: " << answer << endl;
    }
}

//Don't touch Main
int main(int argc, char *argv[]){
    srand(time(NULL));
    guessAnumber(10);
    repeatWord();
    mypow();
    cout << "Thanks for playing, Goodbye!" << endl;
    return 0;
}
